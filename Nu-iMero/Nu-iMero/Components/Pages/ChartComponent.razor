@inject IJSRuntime JSRuntime
@inherits ComponentBase

<canvas id="@CanvasId" width="400" height="200"></canvas>

@code {
    [Parameter] public string CanvasId { get; set; } = "myChart";
    [Parameter] public string ChartType { get; set; } = "bar"; // Default chart type
    [Parameter] public string[] Labels { get; set; } = new string[] { }; // Default to an empty array if not set
    [Parameter] public object[] Data { get; set; } = new object[] { }; // Default to an empty array if not set
    [Parameter] public string[] BackgroundColors { get; set; } = new string[] { }; // Default to an empty array if not set

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure the component is initialized before creating the chart
            await CreateChartAsync();
        }
    }

    private async Task CreateChartAsync()
    {
        // Ensure that all data arrays are not null and have proper values
        if (Labels == null || Labels.Length == 0 || Data == null || Data.Length == 0)
        {
            Console.WriteLine("Invalid data. Chart not created.");
            return; // Avoid rendering if no data is available
        }

        var dataSet = new
        {
            labels = Labels,
            datasets = new[]
            {
                new
                {
                    label = "Sample Data",
                    data = Data,
                    backgroundColor = BackgroundColors.Length > 0 ? BackgroundColors : new string[] { "rgba(255, 99, 132, 0.2)" } // Default color
                }
            }
        };

        var config = new
        {
            type = ChartType,
            data = dataSet
        };

        try
        {
            await JSRuntime.InvokeVoidAsync("createChart", CanvasId, config);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while creating chart: {ex.Message}");
        }
    }
}
