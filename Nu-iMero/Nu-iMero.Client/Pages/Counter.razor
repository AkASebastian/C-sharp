@page "/submit-request"
@inject IJSRuntime JS
@rendermode InteractiveAuto
@using System.ComponentModel.DataAnnotations

<PageTitle>Submit a Request</PageTitle>

<h1>Submit a Request</h1>

<p role="status">Complete the form below to submit your request. You can also download a summary as a PDF.</p>

<EditForm Model="@ticket" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <!-- Name Field -->
    <div class="form-floating mb-3">
        <InputText @bind-Value="ticket.Name" class="form-control" placeholder="Your Name" />
        <label for="name">Name</label>
        <ValidationMessage For="() => ticket.Name" />
    </div>

    <!-- Email Field -->
    <div class="form-floating mb-3">
        <InputText @bind-Value="ticket.Email" class="form-control" placeholder="Your Email" />
        <label for="email">Email</label>
        <ValidationMessage For="() => ticket.Email" />
    </div>

    <!-- Description Field -->
    <div class="form-floating mb-3">
        <InputTextArea @bind-Value="ticket.Description" class="form-control" placeholder="Describe your issue" rows="5" />
        <label for="description">Description</label>
        <ValidationMessage For="() => ticket.Description" />
    </div>

    <!-- Priority Field -->
    <div class="form-floating mb-3">
        <InputText @bind-Value="ticket.Priority" class="form-control" placeholder="Priority (Low, Medium, High)" />
        <label for="priority">Priority</label>
        <ValidationMessage For="() => ticket.Priority" />
    </div>

    <!-- Submit Button -->
    <button type="submit" class="btn btn-primary">Submit Request</button>
</EditForm>

<!-- Button to download PDF -->
<button class="btn btn-success mt-3" @onclick="DownloadPdf">Download PDF</button>

<p class="text-success mt-3">@successMessage</p>

@code {
    private Ticket ticket = new Ticket();
    private string? successMessage;

    // Method to handle form submission
    private void HandleSubmit()
    {
        // Simulate saving the ticket (you can replace this with database logic)
        Console.WriteLine($"Request Submitted: Name = {ticket.Name}, Email = {ticket.Email}, Description = {ticket.Description}, Priority = {ticket.Priority}");
        successMessage = "Your request has been submitted successfully!";
        ticket = new Ticket(); // Reset the form
    }

    // Method to generate and download the PDF
    private async Task DownloadPdf()
    {
        try
        {
            // Initialize the PDF document
            using var memoryStream = new MemoryStream();
            var document = new iText.Kernel.Pdf.PdfDocument(new iText.Kernel.Pdf.PdfWriter(memoryStream));
            var documentContent = new iText.Layout.Document(document);

            // Add form content to the PDF
            documentContent.Add(new iText.Layout.Element.Paragraph("Submitted Request"));
            documentContent.Add(new iText.Layout.Element.Paragraph($"Name: {ticket.Name}"));
            documentContent.Add(new iText.Layout.Element.Paragraph($"Email: {ticket.Email}"));
            documentContent.Add(new iText.Layout.Element.Paragraph($"Description: {ticket.Description}"));
            documentContent.Add(new iText.Layout.Element.Paragraph($"Priority: {ticket.Priority}"));

            // Close the document
            document.Close();

            // Get the bytes of the generated PDF
            var pdfBytes = memoryStream.ToArray();

            // Trigger download using JS interop
            await JS.InvokeVoidAsync("downloadFile", "request.pdf", Convert.ToBase64String(pdfBytes));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating PDF: {ex.Message}");
        }
    }

    // Ticket class representing the form data
    private class Ticket
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(50, ErrorMessage = "Name must be at most 50 characters.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Description is required.")]
        [StringLength(500, ErrorMessage = "Description must be at most 500 characters.")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Priority is required.")]
        [RegularExpression("Low|Medium|High", ErrorMessage = "Priority must be 'Low', 'Medium', or 'High'.")]
        public string Priority { get; set; } = "Medium";
    }
}
